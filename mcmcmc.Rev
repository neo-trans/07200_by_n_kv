print("Timestamp:", time("year"), time("day"), time("seconds"))
seed(0)
if (args.size() == 0) {
  minEss = 333
} else {
  minEss = args[1]
}
maxPSRF = 1.01

neo <- readDiscreteCharacterData("syab07200.neo.nex")
trans <- readDiscreteCharacterData("syab07200.trans.nex")
logFile = "07200_by_n_kv.log"
paramFile = "07200_by_n_kv.p.log"
treeFile = "07200_by_n_kv.trees"
ckpFile = "07200_by_n_kv.ckp"
source("by_n_kv.Rev")

monitors.append( mnModel(filename = logFile, printgen = 36) )
monitors.append( mnModel(filename = paramFile, printgen = 6, stochasticOnly = TRUE, exclude = ["rel_br_lengths"]) )
monitors.append( mnFile(filename = treeFile, printgen = 12, phylogeny) )

mymc3 = mcmcmc(
  mymodel, monitors, moves,
  nruns = 2,
  nchains = 8,
  tuneHeat = TRUE,
  swapMethod = "both",
  swapMode = "multiple",
  combine = "none"
)
print("  - Created MCMCMC object")

checkFreq = 100

# Ignore checkpoints for the time being as they crash RevBayes-mpi
# e.g. https://github.com/revbayes/revbayes/issues/184
#if (fileExists("07200_by_n_kv_run_1_chain_0.ckp")) {
#  print("  - Initializing from checkpoint")
#  mymc3.initializeFromCheckpoint(ckpFile)
#} else {
  mymc3.burnin(generations = 3000, tuningInterval = checkFreq * 3)
#}

stopping_rules[1] = srMaxTime(71, "hours")
stopping_rules[2] = srMinESS(minEss, paramFile, checkFreq)
# PSRF requires RevBayes 1.2.5
stopping_rules[3] = srGelmanRubin(maxPSRF, paramFile, checkFreq)

print("  - Commencing MCMCMC run at", time("year"), time("day"), time("seconds"))
print("    Terminate when ESS =", minESS, "or PSRF <", maxPSRF)
mymc3.run(rules = stopping_rules, checkpointFile = ckpFile, checkpointInterval = checkFreq)

print("  # # # RUN COMPLETE # # #  ")
print("Timestamp:", time("year"), time("day"), time("seconds"))
q()
